
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ####################################################################################################
> # This tests the counting for known pairs.
> 
> suppressPackageStartupMessages(require(dacpet))
> suppressPackageStartupMessages(require(rhdf5))
> 
> chromos <- c(chrA=1000, chrB=10000, chrC=100000)
> simgen <- function(file, num) {
+ 	if (file.exists(file)) { unlink(file) }
+ 	h5createFile(file)
+ 	h5createGroup(file, "counts")
+ 	h5write(data.frame(chr=names(chromos), length=chromos, stringsAsFactors=FALSE), file, 'lengths')
+     
+ 	for (i in 1:length(chromos)) { 
+         max.anchor<-chromos[[i]]
+ 		cur.anchor <- names(chromos)[i]
+ 		h5createGroup(file, file.path("counts", cur.anchor))
+ 
+         for (j in 1:i) {
+             max.target<-chromos[[j]];
+             anchors<-as.integer(floor(runif(num, 1, max.anchor)));
+             targets<-as.integer(floor(runif(num, 1, max.target)));
+             if (i==j){
+                 anchor.1<-pmax(anchors, targets);
+                 target.1<-pmin(anchors, targets);
+                 anchors<-anchor.1;
+                 targets<-target.1;
+             }
+             astr<-rbinom(num, 1, 0.5)==1L
+             tstr<-rbinom(num, 1, 0.5)==1L
+             anchors[astr]<--anchors[astr]
+             targets[tstr]<--targets[tstr]
+ 			
+ 			h5write(data.frame(anchor.pos=anchors, target.pos=targets), file,
+ 				file.path("counts", cur.anchor, names(chromos)[j]))
+         }
+     }
+     return(invisible())
+ }
> 
> reggen <- function(num, width) {
+ 	output <- GRanges()
+ 	for (x in names(chromos)) {
+ 		starts <- runif(num, 1, chromos[[x]])
+ 		widths <- runif(num, width[1], width[2])
+ 		suppressWarnings(output <- c(output, GRanges(x, IRanges(starts, starts+widths))))
+ 	}
+ 	return(output)
+ }
> 
> countcomp <- function(alldirs, regs, ext, filter=1L, restrict=NULL) {
+ 	observed <- recountPET(alldirs, regs, ext=ext, filter=1L, restrict=restrict)
+ 	observed.interact <- paste0(observed$pairs$anchor, ".", observed$pairs$target)
+ 	dummycount <- observed$counts
+ 	dummytotes <- observed$totals
+ 	o <- order(regs)
+ 	sregs <- regs[o]
+ 
+ 	# Picking out the truth.
+ 	overall <- dacpet:::.loadIndices(alldirs)
+ 	for (x in names(overall)) {
+ 		cur1 <- overall[[x]]
+ 		for (y in names(cur1)) { 
+ 			cur2 <- cur1[[y]]
+ 			if (!is.null(restrict) && !(x %in% restrict && y %in% restrict)) { next }
+ 
+ 			collected <- list()
+ 			for (z in 1:length(alldirs)) {
+ 				if (cur2[z]) { 
+             		stuff <- dacpet:::.getPairs(alldirs[z], x, y)
+ 					attributes(stuff$anchor.pos) <- attributes(stuff$target.pos) <- NULL
+ 				} else {
+ 					stuff <- data.frame(anchor.pos=integer(0), target.pos=integer(0))
+ 				}
+ 				astart <- ifelse(stuff$anchor.pos > 0, stuff$anchor.pos - ext + 1L, -stuff$anchor.pos)
+ 				aend <- astart + ext - 1L
+ 				alap <- findOverlaps(GRanges(x, IRanges(astart, aend)), sregs)
+ 
+ 				tstart <- ifelse(stuff$target.pos > 0, stuff$target.pos - ext + 1L, -stuff$target.pos)
+ 				tend <- tstart + ext - 1L
+ 				tlap <- findOverlaps(GRanges(y, IRanges(tstart, tend)), sregs)
+ 
+ 				# Collating them to identify combinations.
+ 				a.ok <- split(subjectHits(alap), queryHits(alap))
+ 				t.ok <- split(subjectHits(tlap), queryHits(tlap))
+ 				both.ok <- intersect(names(a.ok), names(t.ok))
+ 				all.results <- list()
+ 				for (pet in both.ok) {
+ 					all.combos <- merge(a.ok[[pet]], t.ok[[pet]])
+ 					interactions <- paste0(o[pmax(all.combos[,1], all.combos[,2])], ".",
+ 							o[pmin(all.combos[,1], all.combos[,2])])
+ 					all.results[[pet]] <- unique(interactions)
+ 				}
+ 				all.results <- unlist(all.results, use.names=FALSE)
+ 				
+ 				# Comparing them directly.
+ 				final.counts <- table(all.results)
+ 				comp <- match(names(final.counts), observed.interact)
+ 				if (any(is.na(comp))) { stop("interaction not in canonical set") }
+ 				if (!identical(as.integer(final.counts), observed$counts[comp,z])) { 
+ 					stop("mismatches in count values") }
+ 
+ 				# Getting rid of them after loading.
+ 				dummycount[comp,z] <- dummycount[comp,z] - as.integer(final.counts)
+ 				dummytotes[z] <- dummytotes[z] - length(astart)
+ 			}
+ 		}
+ 	}
+ 
+ 	# Checking that there isn't any unID's odds and ends.
+ 	if (any(dummycount!=0L)) { 
+ 		stop("interaction in observed set not identified, or identified multiple times") 
+ 	}
+ 	if (any(dummytotes!=0L)) { 
+ 		stop("totals don't match up")
+ 	}
+ 
+ 	# Checking what happens when I set the filter on.
+ 	filtered <- recountPET(alldirs, regs, ext=ext, filter=filter, restrict=restrict)
+ 	keep <- rowSums(observed$counts) >= filter
+ 
+ 	fpairs <- observed$pairs[keep,,drop=FALSE]
+ 	rownames(fpairs) <- NULL
+ 	fcounts <- observed$counts[keep,,drop=FALSE]
+ 
+ 	if (!identical(fpairs, filtered$pairs) || !identical(fcounts, filtered$counts)) { 
+ 		stop("filtering is not correct") }
+ 
+ 	return(head(observed$pairs))
+ }
> 
> ####################################################################################################
> # Initializing the analysis.
> 
> set.seed(485632481)
> 
> dir.create("temp-pair")
> dir1<-"temp-pair/out.1.h5"
> dir2<-"temp-pair/out.2.h5"
> dir3<-"temp-pair/out.3.h5"
> 
> simgen(dir1, 200)
> simgen(dir2, 100)
> 
> myreg <- reggen(10, c(10, 50))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1      1      1
2      3      1
3      5      1
4      5      5
5      8      1
6      8      5
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      1      1
2      3      1
3      3      3
4      5      1
5      5      3
6      5      5
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      1      1
2      3      1
3      3      3
4      5      1
5      5      3
6      5      5
> 
> myreg <- reggen(10, c(40, 100))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1      4      4
2      5      4
3      5      5
4      8      4
5      8      5
6      8      8
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      4      4
2      5      4
3      5      5
4      8      4
5      8      5
6      8      8
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      4      4
2      5      4
3      5      5
4      8      4
5      8      5
6      8      8
> 
> myreg <- reggen(50, c(10, 25))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1     50     42
2      7      5
3      7      9
4      7      7
5     45      5
6     45     42
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      5      5
2     42      5
3     42     42
4      9      5
5      9     42
6      9      9
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      5      5
2     42      5
3     42     42
4      9      5
5      9     42
6      9      9
> 
> # Again, with more reads.
> 
> simgen(dir1, 500)
> simgen(dir2, 1000)
> 
> myreg <- reggen(10, c(10, 50))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1      4      4
2      8      4
3      8      8
4      2      4
5      2      8
6      2      2
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      4      4
2      8      4
3      8      8
4      2      4
5      2      8
6      2      2
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      4      4
2      8      4
3      8      8
4      2      4
5      2      8
6      2      2
> 
> myreg <- reggen(10, c(40, 100))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1     10     10
2      6     10
3      6      6
4      9     10
5      9      6
6      9      9
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1     10     10
2      6     10
3      6      6
4      9     10
5      9      6
6      9      9
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1     10     10
2      6     10
3      6      6
4      9     10
5      9      6
6      9      9
> 
> myreg <- reggen(50, c(10, 25))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1      3      3
2     49      3
3     16      3
4     16     49
5     16     16
6      9      3
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      3      3
2     49      3
3     49     49
4     16      3
5     16     49
6     16     16
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      3      3
2     49      3
3     49     49
4     16      3
5     16     49
6     16     16
> 
> # Again, with more directories.
> 
> simgen(dir1, 200)
> simgen(dir2, 100)
> simgen(dir3, 400)
> 
> myreg <- reggen(10, c(10, 50))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1     10     10
2      9     10
3      9      9
4      5      1
5      5      5
6      4      1
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      1      1
2     10      1
3     10     10
4      9      1
5      9     10
6      9      9
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      1      1
2     10      1
3     10     10
4      9      1
5      9     10
6      9      9
> 
> myreg <- reggen(10, c(40, 100))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1      2      2
2      4      2
3      4      4
4      9      2
5      9      4
6      9      9
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      2      2
2      4      2
3      4      4
4      9      2
5      9      4
6      9      9
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      2      2
2      4      2
3      4      4
4      9      2
5      9      4
6      9      9
> 
> myreg <- reggen(50, c(10, 25))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1     22     22
2     26     22
3     26     26
4     21     22
5     21     26
6     21     21
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1     22     22
2     26     22
3     26     26
4     21     22
5     21     26
6     21     21
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1     22     22
2     26     22
3     26     26
4     21     22
5     21     26
6     21     21
> 
> # Lastly, with a lot more regions.
> 
> simgen(dir1, 200)
> simgen(dir2, 100)
> simgen(dir3, 400)
> 
> myreg <- reggen(20, c(10, 50))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1     10     10
2      8     10
3      8      8
4     15     10
5     15      8
6     15     15
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1     10     10
2      8     10
3      8      8
4     15     10
5     15      8
6     15     15
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1     10     10
2      8     10
3      8      8
4     15     10
5     15      8
6     15     15
> 
> myreg <- reggen(20, c(40, 100))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1     14     14
2      1     14
3      1      1
4     19     14
5     19      1
6     19     19
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1     14     14
2      1     14
3      1      1
4     19     14
5     19      1
6     19     19
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1     14     14
2      1     14
3      1      1
4     19     14
5     19      1
6     19     19
> 
> myreg <- reggen(100, c(10, 25))
> countcomp(c(dir1, dir2), myreg, 10)
  anchor target
1     32      1
2     94      1
3     14      1
4     49      1
5     23      1
6     28     65
> countcomp(c(dir1, dir2), myreg, 100)
  anchor target
1      1      1
2     32      1
3     32     32
4     94      1
5     94     32
6     94     94
> countcomp(c(dir1, dir2), myreg, 100, filter=5)
  anchor target
1      1      1
2     32      1
3     32     32
4     94      1
5     94     32
6     94     94
> 
> # Repeating with restriction.
> 
> myreg <- reggen(100, c(10, 25))
> countcomp(c(dir1, dir2), myreg, 10, restrict="chrA")
  anchor target
1     47     36
2     47     47
3     54     47
4     64     36
5     64     47
6     64     54
> countcomp(c(dir1, dir2), myreg, 20, restrict="chrB")
  anchor target
1    170    158
2    199    158
3    141    174
4    141    115
5    164    174
6    164    115
> countcomp(c(dir1, dir2), myreg, 30, restrict=c("chrB", "chrC"))
  anchor target
1    170    158
2    199    158
3    147    155
4    141    174
5    141    115
6    164    174
> countcomp(c(dir1, dir2), myreg, 100, filter=5, restrict=c("chrA", "chrC"))
  anchor target
1     36     36
2     47     36
3     47     47
4     54     36
5     54     47
6     54     54
> 
> ####################################################################################################
> 
> unlink("temp-pair", recursive=TRUE)
> 
> ####################################################################################################
> # End.
> 
> proc.time()
   user  system elapsed 
 91.402   0.647  92.230 
